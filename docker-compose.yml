services:
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - worker
      - api
      - streamlit
    networks:
      - app-network
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network
  db:
    image: postgres:15-alpine
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    build: ./api
    ports:
      - "8000:8000" #api
      - "8001:8001" #metrics
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app-network
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    ports:
      - "8002:8002" #metrics only
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - utility 
                - compute
    volumes:
      - model_weights:/app/models
      - hf_cache:/cache/huggingface

  streamlit:
    build: ./streamlit
    ports:
      - "8501:8501"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app-network

volumes:
  grafana-storage:
  pgdata:
  model_weights:
  hf_cache:
networks:
  app-network:
    driver: bridge